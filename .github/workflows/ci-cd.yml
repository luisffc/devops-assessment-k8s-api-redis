name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
      - 'helm/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'api/**'
      - 'helm/**'
      - '.github/workflows/ci-cd.yml'

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: devops-assessment-dev
  ECR_REPOSITORY: devops-assessment-dev-api
  HELM_CHART_PATH: ./helm/api-redis-stack

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd api
        pip install -r requirements.txt
        pip install flake8 black isort safety bandit

    - name: Lint with flake8
      run: |
        cd api
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        cd api
        black --check .

    - name: Import sort check with isort
      run: |
        cd api
        isort --check-only .

    - name: Security check with bandit
      run: |
        cd api
        bandit -r . || true

    - name: Safety check
      run: |
        cd api
        safety check || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/devops-assessment-dev-github-actions-role
        role-session-name: GitHubActions
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=sha,,format=long,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ./api
        file: ./api/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Set image reference for scanning
      id: image-ref
      run: |
        # Extract the first tag from the metadata outputs
        FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
        echo "image=${FIRST_TAG}" >> $GITHUB_OUTPUT
        echo "Scanning image: ${FIRST_TAG}"

    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image-ref.outputs.image }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.18.3'

    - name: Add Bitnami Helm repository
      run: helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Update Helm dependencies
      run: |
        cd ${{ env.HELM_CHART_PATH }}
        helm dependency update

    - name: Lint Helm chart
      run: |
        cd ${{ env.HELM_CHART_PATH }}
        helm lint .

    - name: Template Helm chart
      run: |
        cd ${{ env.HELM_CHART_PATH }}
        helm template test-release .

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build-and-push, helm-lint]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/devops-assessment-dev-github-actions-role
        role-session-name: GitHubActions
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.13.0'

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

        # Verify connection
        kubectl get nodes

    - name: Add Bitnami Helm repository
      run: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo update

    - name: Deploy application
      run: |
        cd ${{ env.HELM_CHART_PATH }}
        helm dependency update

        # Get the correct secret name from Terraform outputs format
        REDIS_SECRET_NAME="devops-assessment-dev-redis-secret"
        API_IRSA_ROLE_ARN="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/devops-assessment-dev-api-irsa"

        # Check if namespace exists, if not create it
        kubectl get namespace api-namespace || kubectl create namespace api-namespace

        # Clean up any existing failed deployments
        kubectl delete pods --all -n api-namespace --force --grace-period=0 || true
        kubectl delete deployment --all -n api-namespace || true
        kubectl delete statefulset --all -n api-namespace || true
        kubectl delete replicaset --all -n api-namespace || true

        # Wait a moment for cleanup
        sleep 10

        # Create a simple secret for Redis password instead of using AWS Secrets Manager
        REDIS_SECRET_NAME="api-redis-redis-secret"
        kubectl create secret generic "$REDIS_SECRET_NAME" \
          --from-literal=password="$(openssl rand -base64 32)" \
          -n api-namespace --dry-run=client -o yaml | kubectl apply -f -

        helm upgrade --install api-redis . \
          --namespace api-namespace \
          --set api.image.repository=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }} \
          --set api.image.tag=main-${{ github.sha }} \
          --set api.service.type=LoadBalancer \
          --set api.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type"=nlb \
          --set api.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-scheme"=internet-facing \
          --set api.ingress.enabled=false \
          --set secretsManager.enabled=false \
          --set redis.auth.existingSecret="$REDIS_SECRET_NAME" \
          --set redis.auth.existingSecretPasswordKey=password \
          --set redis.master.persistence.enabled=false \
          --set redis.replica.persistence.enabled=false \
          --timeout=5m

        # Debug: Check the deployment status
        echo "üîç Checking deployment status..."
        kubectl get pods,svc,ingress -n api-namespace -o wide

        # Check events for any issues
        echo "üîç Checking recent events..."
        kubectl get events -n api-namespace --sort-by='.lastTimestamp' | tail -10

        # Check pod logs if any pods exist
        echo "üîç Checking pod logs..."
        kubectl get pods -n api-namespace -o name | head -3 | xargs -I {} kubectl logs {} -n api-namespace --tail=50 || true

        # Debug: Check if the latest image has the right dependencies
        echo "üîç Debugging image dependencies..."
        kubectl get pods -n api-namespace -l app.kubernetes.io/name=python-api -o name | head -1 | xargs -I {} kubectl exec {} -n api-namespace -- pip list | grep gunicorn || echo "Gunicorn not found in container"

    - name: Verify deployment
      run: |
        echo "üîç Final deployment verification..."

        # Wait for Redis to be ready first
        echo "‚è≥ Waiting for Redis to be ready..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=redis -n api-namespace --timeout=300s || true

        # Wait for API to be ready
        echo "‚è≥ Waiting for API to be ready..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=python-api -n api-namespace --timeout=300s || true

        # Check final status
        echo "üìä Final status:"
        kubectl get pods,svc,ingress -n api-namespace -o wide

        # Check if deployment was successful
        API_READY=$(kubectl get pods -n api-namespace -l app.kubernetes.io/name=python-api -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}' | grep -c "True" || echo "0")
        REDIS_READY=$(kubectl get pods -n api-namespace -l app.kubernetes.io/name=redis -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}' | grep -c "True" || echo "0")

        if [ "$API_READY" -gt "0" ] && [ "$REDIS_READY" -gt "0" ]; then
          echo "‚úÖ Deployment successful - Both API and Redis are ready"

          # Get LoadBalancer endpoint
          echo "üåê Getting LoadBalancer endpoint..."
          LB_HOSTNAME=$(kubectl get svc -n api-namespace api-redis-api-redis-stack-api -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Pending")
          LB_IP=$(kubectl get svc -n api-namespace api-redis-api-redis-stack-api -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")

          if [ "$LB_HOSTNAME" != "Pending" ] && [ "$LB_HOSTNAME" != "" ]; then
            echo "üöÄ API Access URL: http://$LB_HOSTNAME"
            echo "üîç Health Check: http://$LB_HOSTNAME/health"
            echo "üì° Test endpoint: http://$LB_HOSTNAME/data/test"
          elif [ "$LB_IP" != "" ]; then
            echo "üöÄ API Access URL: http://$LB_IP"
            echo "üîç Health Check: http://$LB_IP/health"
            echo "üì° Test endpoint: http://$LB_IP/data/test"
          else
            echo "‚è≥ LoadBalancer still provisioning, check again in a few minutes with:"
            echo "kubectl get svc -n api-namespace api-redis-api-redis-stack-api"
          fi

        else
          echo "‚ùå Deployment incomplete - API Ready: $API_READY, Redis Ready: $REDIS_READY"
          kubectl describe pods -n api-namespace | grep -A 10 -B 5 "Events:"
          exit 1
        fi
